#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# This file is part of Liri.
#
# Copyright (C) 2019 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
#
# $BEGIN_LICENSE:MIT$
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
# $END_LICENSE$
#

import configparser
import glob
import os
import subprocess


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('source', type=str, help='Source tree directory')
    args = parser.parse_args()

    # Read Transifex configuration
    transifex_filename = os.path.join(args.source, '.tx', 'config')
    if os.path.exists(transifex_filename):
        config = configparser.ConfigParser()
        config.read_file(open(transifex_filename))
    else:
        raise Exception('File "%s" doesn\'t exist' % transifex_filename)

    # Pull translations
    subprocess.run(['tx', 'pull', '--force', '--all', '--minimum-perc=5'], cwd=args.source)

    # Push changes if under CI
    is_ci = 'CI' in os.environ
    globs = []

    # Determine the file globs
    for section in config.sections():
        if config.has_option(section, 'file_filter'):
            globs.append(config.get(section, 'file_filter').replace('<lang>', '*'))
        # Regenerate desktop file
        if config.has_option(section, 'type'):
            source_type = config.get(section, 'type').upper()
            source_file = config.get(section, 'source_file')
            if source_type == 'DESKTOP':
                dest_file = config.get(section, 'liri_dest_file')
                file_filter = config.get(section, 'file_filter').replace('<lang>', '*')
                dir_path = os.path.dirname(os.path.realpath(__file__))
                subprocess.run([os.path.join(dir_path, 'translate-desktop'), '--source=' + source_file, '--dest=' + dest_file] + glob.glob(file_filter), cwd=args.source)
                if is_ci:
                    subprocess.run(['git', 'add', '--verbose', dest_file], cwd=args.source)

        # Push changes
        if is_ci:
            for pattern in globs:
                for entry in glob.glob(pattern):
                    subprocess.run(['git', 'add', '--verbose', entry], cwd=args.source)
            if globs:
                author = 'Liri CI <ci@liri.io>'
                subject = 'Automatic merge of Transifex translations'
                subprocess.run(['git', 'config', '--global', 'push.default', 'simple'], cwd=args.source)
                subprocess.run(['git', 'commit', '--author=' + author, '--message=' + subject], cwd=args.source)
            subprocess.run(['git', 'push'], cwd=args.source)
