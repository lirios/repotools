#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# This file is part of Liri.
#
# Copyright (C) 2019 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
#
# $BEGIN_LICENSE:MIT$
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
# $END_LICENSE$
#

import configparser
import os
import glob
import shutil
import subprocess


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('source', type=str, help='Source tree directory')
    args = parser.parse_args()

    # Find lupdate
    for name in ('lupdate-qt5', 'lupdate'):
        lupdate = shutil.which(name)
        if lupdate is not None:
            break

    # Read Transifex configuration
    transifex_filename = os.path.join(args.source, '.tx', 'config')
    if os.path.exists(transifex_filename):
        config = configparser.ConfigParser()
        config.read_file(open(transifex_filename))
    else:
        raise Exception('File "%s" doesn\'t exist' % transifex_filename)

    # Iterate over resources
    for section in config.sections():
        if section == 'main':
            continue

        source_type = config.get(section, 'type').upper()
        source_file = config.get(section, 'source_file')
        if source_type and source_file:
            # Update source
            if source_type == 'QT':
                source_directory = config.get(section, 'liri_source_directory')
                os.makedirs(os.path.dirname(os.path.abspath(source_file)), exist_ok=True)
                subprocess.run([lupdate, source_directory, '-ts', '-no-obsolete', source_file], cwd=args.source)

    # Push
    subprocess.run(['tx', 'push', '--source', '--no-interactive'], cwd=args.source)
