#!/usr/bin/env python3
#
# This file is part of Liri.
#
# Copyright (C) 2019 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
#
# $BEGIN_LICENSE:MIT$
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
# $END_LICENSE$
#

import argparse
import github
import os

rename = {
}

merge = {
}

labels = {
    "bug": "F44336",
    "duplicate": "EEEEEE",
    "invalid": "EEEEEE",
    "wontfix": "EEEEEE",
    "needs info": "EEEEEE",
    "enhancement": "039BE5",
    "help wanted": "FFC107",
    "question": "E91E63",
    "task": "009688",
    "idea": "009688",
    "package": "795548",
    "doc": "00BCD4",
    "fixed upstream": "8BC34A",
    "upstream": "FF8A80",
    "needs design": "FFC107",
    "hacktoberfest": "3F51B5",
    "good first issue": "4CAF50",
}

descriptions = {
    "bug": "Something isn't working",
    "duplicate": "This issue or pull request already exists",
    "invalid": "This doesn't seem right",
    "wontfix": "This will not be worked on",
    "needs info": "Further information is requested",
    "enhancement": "New feature or request",
    "help wanted": "Extra attention is needed",
    "question": "Further information is requested",
    "task": "Task",
    "idea": "Idea to be developed",
    "package": "Packaging",
    "doc": "Documentation",
    "fixed upstream": "Upstream issue that has already been fixed",
    "upstream": "Upstream issue",
    "needs design": "This could use some help from a designer",
    "hacktoberfest": "Hacktoberfest",
    "good first issue": "Good for newcomers",
}

parser = argparse.ArgumentParser()
parser.add_argument('--dry-run', '-n', dest='dry_run', action='store_true')
args = parser.parse_args()

# Create a token with the following scopes and paste it into the file:
#   - repo -> repo:status
#   - repo -> public_repo
#   - admin:org -> read:org
#   - user -> read:user
with open(os.path.expanduser("~/.cache/liri-repotools"), "r") as fd:
    token = fd.readline().strip()
gh = github.Github(token)

lirios_org = None
for org in gh.get_user().get_orgs():
    if org.login == "lirios":
        lirios_org = org
        break

for repo in lirios_org.get_repos(type="public"):
    # Skip archived repositories (they are read-only)
    if repo.archived is True:
        continue
    print("== Repository {}".format(repo.name))
    # Rename old labels
    for oldname, newname in rename.items():
        try:
            label = repo.get_label(oldname)
        except:
            pass
        else:
            if args.dry_run or label.edit(newname, label.color):
                print("Rename {} to {}".format(oldname, newname))
    # Create new labels and change color
    for name in labels.keys():
        try:
            label = repo.get_label(name)
        except:
            if args.dry_run:
                print("Create label {} ({}) with color {}".format(name, descriptions.get(name, "n.a."), labels[name]))
            else:
                label = repo.create_label(name, labels[name], description=descriptions.get(name))
                if label:
                    print("Created label {} ({}) with color {}".format(label.name, descriptions.get(name, "n.a."), label.color))
                else:
                    print("Failed to created label {}".format(name))
        else:
            if label.color != labels[name] or label.description != descriptions.get(name):
                if not args.dry_run:
                    label.edit(name, labels[name], description=descriptions.get(name))
                if descriptions.get(name):
                    print("Set label '{}' color to {} and description to \"{}\" successfully".format(name, label.color, descriptions.get(name)))
                else:
                    print("Set label '{}' color to {} successfully".format(name, label.color))
    # Merge labels
    for oldname, newname in merge.items():
        try:
            old_label = repo.get_label(oldname)
            new_label = repo.get_label(newname)
            if not args.dry_run:
                for issue in repo.get_issues(labels=[label]):
                    issue.add_to_labels(new_label)
                old_label.delete()
            print("Replace \"{}\" label with \"{}\"".format(oldname, newname))
        except:
            pass
